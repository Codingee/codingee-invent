{"version":3,"sources":["components/ContactForm/useForm.js","components/ContactForm/validationRules.js","components/ContactForm/styles.js","components/ContactForm/index.js"],"names":["useForm","validate","useState","values","setValues","errors","setErrors","shouldSubmit","useEffect","type","Object","keys","length","notification","message","description","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","window","open","focus","email","test","ContactContainer","styled","div","Contact","section","FormGroup","form","ButtonContainer","span","Block","loadable","Button","withTranslation","title","content","id","t","justify","align","lg","md","sm","padding","autoComplete","onSubmit"],"mappings":"0OA2DeA,G,OAvDC,SAACC,GAAc,IAAD,EACAC,mBAAS,IADT,mBACrBC,EADqB,KACbC,EADa,OAEAF,mBAAS,IAFT,mBAErBG,EAFqB,KAEbC,EAFa,OAGYJ,oBAAS,GAHrB,mBAGrBK,EAHqB,UA+B5BC,qBAAU,WA1BuB,IAACC,EA2BG,IAA/BC,OAAOC,KAAKN,GAAQO,QAAgBL,IACtCH,EAAU,IA5BoBK,EA6BL,UA5B3BI,IAAaJ,GAAM,CACjBK,QAAS,UACTC,YAAa,mCA4Bd,CAACV,EAAQE,IAWZ,MAAO,CACLS,aAVmB,SAACC,GACpBA,EAAMC,UACNd,GAAU,SAACD,GAAD,mBAAC,eACNA,GADK,kBAEPc,EAAME,OAAOC,KAAOH,EAAME,OAAOE,WAEpCf,GAAU,SAACD,GAAD,mBAAC,eAAiBA,GAAlB,kBAA2BY,EAAME,OAAOC,KAAO,SAKzDE,aArCmB,SAACL,GACpBA,EAAMM,iBACIC,OAAOC,KAAK,8BAClBC,SAmCJvB,SACAE,YCvDW,SAASJ,EAASE,GAC/B,IAAIE,EAAS,GAYb,OAXKF,EAAOiB,OACVf,EAAOe,KAAO,oBAEXjB,EAAOwB,MAEA,eAAeC,KAAKzB,EAAOwB,SACrCtB,EAAOsB,MAAQ,4BAFftB,EAAOsB,MAAQ,4BAIZxB,EAAOW,UACVT,EAAOS,QAAU,uBAEZT,E,o/BCXF,IAAMwB,EAAmBC,IAAOC,IAAV,KAIhBC,EAAUF,IAAOG,QAAV,KAYPC,GANgBJ,IAAOC,IAAV,KAMDD,IAAOK,KAAV,MAkBTC,GATON,IAAOO,KAAV,KAScP,IAAOC,IAAV,MC1BtBO,EAAQC,aAAS,kBAAM,kCAEvBC,GADQD,aAAS,kBAAM,kCACdA,aAAS,kBAAM,kCACbA,aAAS,kBAAM,kCAuCjBE,yBArCC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,GAAIC,EAAQ,EAARA,EAAQ,EACU7C,EAAQC,GAAzBqB,GADO,EACrCnB,OADqC,EAC7BE,OAD6B,EACrBW,aADqB,EACPM,cAatC,OACE,cAAC,EAAD,CAAoBsB,GAAIA,EAAxB,SACE,cAAC,EAAD,UACE,eAAC,IAAD,CAAKnC,KAAK,OAAOqC,QAAQ,gBAAgBC,MAAM,SAA/C,UACE,cAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,SACE,cAACZ,EAAD,CAAOa,SAAS,EAAMT,MAAOA,EAAOC,QAASA,MAE/C,cAAC,IAAD,CAAKK,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,SACE,cAAC,EAAD,CAAaE,aAAa,MAAMC,SAAU/B,EAA1C,SACE,cAAC,EAAD,UACE,cAACkB,EAAD,CAAQpB,KAAK,SAASX,KAAK,SAA3B,SACGoC,EAAE","file":"static/js/15.f9a3b173.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nconst useForm = (validate) => {\r\n  const [values, setValues] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = (type) => {\r\n    notification[type]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    var win = window.open(\"mailto:l.qqbadze@gmail.com\");\r\n    win.focus();\r\n\r\n    // setErrors(validate(values));\r\n    // // Your url for API\r\n    // const url = \"\";\r\n    // if (Object.keys(values).length === 3) {\r\n    //   axios\r\n    //     .post(url, {\r\n    //       ...values,\r\n    //     })\r\n    //     .then(() => {\r\n    //       setShouldSubmit(true);\r\n    //     });\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues(\"\");\r\n      openNotificationWithIcon(\"success\");\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (event) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n\r\nexport default useForm;\r\n","export default function validate(values) {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const ContactContainer = styled.div`\r\n  padding: 5rem 0;\r\n`;\r\n\r\nexport const Contact = styled.section`\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 1280px;\r\n`;\r\n\r\nexport const IconContainer = styled.div`\r\n  @media only screen and (min-width: 980px) {\r\n    padding: 10rem 7rem;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled.form`\r\n  width: 100%;\r\n  max-width: 520px;\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled.span`\r\n  display: block;\r\n  font-family: 'Ubuntu', sans-serif;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  text-align: end;\r\n  position: relative;\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import React, {useEffect} from 'react';\r\nimport { Row, Col } from 'antd';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport loadable from '@loadable/component';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nimport useForm from './useForm';\r\nimport validate from './validationRules';\r\nimport * as S from './styles';\r\n\r\nconst Block = loadable(() => import('../Block'));\r\nconst Input = loadable(() => import('../../common/Input'));\r\nconst Button = loadable(() => import('../../common/Button'));\r\nconst TextArea = loadable(() => import('../../common/TextArea'));\r\n\r\nconst Contact = ({ title, content, id, t }) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }) => {\r\n    const ErrorMessage = errors[type];\r\n    return errors[type] ? (\r\n      <Zoom cascade>\r\n        <S.Span>{ErrorMessage}</S.Span>\r\n      </Zoom>\r\n    ) : (\r\n      <S.Span />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <S.ContactContainer id={id}>\r\n      <S.Contact>\r\n        <Row type=\"flex\" justify=\"space-between\" align=\"middle\">\r\n          <Col lg={12} md={11} sm={24}>\r\n            <Block padding={true} title={title} content={content} />\r\n          </Col>\r\n          <Col lg={12} md={12} sm={24}>\r\n            <S.FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <S.ButtonContainer>\r\n                <Button name=\"submit\" type=\"submit\">\r\n                  {t('Chat with us')}\r\n                </Button>\r\n              </S.ButtonContainer>\r\n            </S.FormGroup>\r\n\r\n          </Col>\r\n        </Row>\r\n      </S.Contact>\r\n    </S.ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"sourceRoot":""}